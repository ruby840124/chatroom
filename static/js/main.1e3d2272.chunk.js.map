{"version":3,"sources":["asset/logo.JPG","login.js","config.js","home.js","signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","login","className","src","require","alt","style","marginTop","color","to","React","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","home","props","getUserData","ref","firebase","firestore","collection","data","get","then","querySnapshot","forEach","doc","push","setState","accountChange","event","account","target","value","passwordChange","password","checkLoginAlert","state","accountArray","passwordArray","i","length","indexOf","alert","window","location","assign","apps","initializeApp","analytics","this","fontSize","display","type","placeholder","onChange","signup","_isMounted","nameChange","name","genderChange","gender","checkAccount","signUp","set","marginBottom","onClick","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e3d2272.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.18fad0a3.JPG\";","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass login extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"MainBlock\">\r\n        <header className=\"topBlock\">\r\n          <img src={require('./asset/logo.JPG')} alt=\"\" ></img>\r\n          <label style={{marginTop:'220px', color:'white'}}>FengChat</label>\r\n        </header>\r\n          <div className=\"cotentBlock\">\r\n            <Link to=\"/chatroom\"><button>back to home</button></Link>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default login;\r\n","const config = {\r\n        apiKey: \"AIzaSyDTaUGrEK6VmbfoSuVbZGaa0j4oZd8UoKU\",\r\n        authDomain: \"fengchat-93bae.firebaseapp.com\",\r\n        databaseURL: \"https://fengchat-93bae.firebaseio.com\",\r\n        projectId: \"fengchat-93bae\",\r\n        storageBucket: \"fengchat-93bae.appspot.com\",\r\n        messagingSenderId: \"213640623326\",\r\n        appId: \"1:213640623326:web:4eb0c94e117a3b1fb0be4f\",\r\n        measurementId: \"G-PE2XN0LN8M\"\r\n};\r\n\r\nexport default config;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport firebase from 'firebase';\r\nimport config from \"./config\";\r\nimport './App.css';\r\n\r\nclass home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {account:'',password:'', data:[]};\r\n\r\n    // Initialize Firebase\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n  }\r\n    firebase.analytics();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  //get database data\r\n  getUserData = () => {\r\n    var db = firebase.firestore();\r\n    var ref = db.collection('account');\r\n    let data = [];\r\n    ref.get().then(querySnapshot => {\r\n      querySnapshot.forEach(doc => {\r\n        data.push(doc.data());\r\n      });\r\n      this.setState({data: data});\r\n    });\r\n  }\r\n\r\n  accountChange = (event) =>  {\r\n    this.setState({account: event.target.value});\r\n  }\r\n\r\n  passwordChange = (event) =>  {\r\n    this.setState({password: event.target.value});\r\n  }\r\n\r\n  checkLoginAlert = () => {\r\n    const {account, password, data} = this.state;\r\n    let accountArray = [];\r\n    let passwordArray = [];\r\n    //get the account and password datas\r\n    for(let i=0 ;i <data.length ; i++){\r\n        accountArray.push(data[i].account);\r\n        passwordArray.push(data[i].password);\r\n    }\r\n\r\n    if(account.length === 0 || password.length === 0){\r\n        alert(\"Please enter the password or account.\");\r\n        return;\r\n    }\r\n\r\n    //search for correspond account\r\n    if(accountArray.indexOf(account) !== -1){\r\n      //the wrong password\r\n      if(passwordArray[accountArray.indexOf(account)] !== password){\r\n        alert(\"The password is the wrong.\");\r\n      }else{\r\n        window.location.assign(\"/chatroom/login\");\r\n      }\r\n    }else{\r\n        alert(\"no such account.\");\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const {account, password} = this.state;\r\n    return (\r\n      <div className=\"MainBlock\">\r\n        <header className=\"topBlock\">\r\n          <img  src={require('./asset/logo.JPG')}/>\r\n          <label style={{fontSize:'28px', color:'white'}}>FengChat</label>\r\n          <label style={{fontSize:'22px'}}>Home</label>\r\n        </header>\r\n        <div className=\"cotentBlock\">\r\n          <div style={{display:'inline'}}>\r\n            <input type=\"text\" placeholder=\"account\" value={account} onChange={this.accountChange}/>\r\n          </div>\r\n          <div style={{display:'inline'}}>\r\n            <input type=\"password\" placeholder=\"password\" value={password} onChange={this.passwordChange}/>\r\n          </div> \r\n          <Link to=\"/chatroom/login\"><button style={{marginTop:'15px'}}>login</button></Link>\r\n          <Link to=\"/chatroom/signup\"><button style={{marginTop:'5px'}}>Sign up</button></Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default home;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport firebase from 'firebase';\r\nimport config from \"./config\";\r\nimport './App.css';\r\n\r\nclass signup extends React.Component {\r\n  _isMounted = false;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {name:'',account:'',password:'', gender:'female',data:[]};\r\n        // Initialize Firebase\r\n        if (!firebase.apps.length) {\r\n          firebase.initializeApp(config);\r\n      }\r\n        firebase.analytics();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    this.getUserData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n    //get database data\r\n  getUserData = () => {\r\n      var db = firebase.firestore();\r\n      var ref = db.collection('account');\r\n      let data = [];\r\n      ref.get().then(querySnapshot => {\r\n        querySnapshot.forEach(doc => {\r\n          data.push(doc.data());\r\n        });\r\n        if (this._isMounted) {\r\n          this.setState({data: data});\r\n        }\r\n      });\r\n  }\r\n\r\n  nameChange = (event) =>  {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  passwordChange = (event) =>  {\r\n    this.setState({password: event.target.value});\r\n  }\r\n\r\n  accountChange = (event) =>  {\r\n    this.setState({account: event.target.value});\r\n  }\r\n\r\n  genderChange= (event) =>  {\r\n    this.setState({gender: event.target.value});\r\n  }\r\n\r\n  checkAccount = (account) => {\r\n    const {data} = this.state;\r\n    let accountArray = [];\r\n    for(let i=0 ;i <data.length ; i++){\r\n        accountArray.push(data[i].account);\r\n    }\r\n\r\n    return accountArray.indexOf(account)+1;\r\n  }\r\n\r\n  signUp = () =>  {\r\n    const {name, account, password, gender} = this.state;\r\n    if(name.length === 0 || account.length === 0 || password.length === 0){\r\n      alert(\"Please make sure your fields are filled out.\");\r\n      return;\r\n    }else if(this.checkAccount(account)){\r\n      alert(\"The account can't use.\");\r\n    }else{\r\n      //put data into database\r\n      var db = firebase.firestore();\r\n      var ref = db.collection('account').doc(account);\r\n      ref.set({\r\n        name: name,\r\n        account: account,\r\n        password: password,\r\n        gender: gender\r\n      }).then(() => {\r\n        alert(\"sign up successful!\");\r\n        window.location.assign(\"/chatroom\");\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {name, account, password, gender} = this.state;\r\n    return (\r\n      <div className=\"MainBlock\">\r\n        <header className=\"topBlock\">\r\n          <img src={require('./asset/logo.JPG')} alt=\"\" ></img>\r\n          <label style={{fontSize:'28px',color:'white'}}>FengChat</label>\r\n          <label style={{fontSize:'22px'}}>Signup</label>\r\n        </header>\r\n        <div className=\"cotentBlock\">\r\n          <input type=\"text\" placeholder=\"name\" value={name} onChange={this.nameChange}/>\r\n          <input type=\"text\" placeholder=\"account\" value={account} onChange={this.accountChange}/>\r\n          <input type=\"password\" placeholder=\"password\" value={password} onChange={this.passwordChange}/>\r\n          <div style={{display:'inline'}}>\r\n            <label>gender:  </label>\r\n            <select style={{marginBottom:'10px'}} name=\"gender\" value={gender} onChange={this.genderChange}>\r\n　            <option value=\"female\">female</option>\r\n　            <option value=\"man\">man</option>\r\n            </select>\r\n          </div>\r\n          <button onClick={this.signUp}>submit</button>\r\n          <Link to=\"/chatroom\"><button>back to home</button></Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default signup;","import React from 'react';\nimport login from './login';\nimport home from './home';\nimport signup from './signup';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/chatroom\" component={home} />  \n          <Route exact path=\"/chatroom/login\" component={login} /> \n          <Route exact path=\"/chatroom/signup\" component={signup} /> \n        </Switch>  \n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}