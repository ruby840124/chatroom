{"version":3,"sources":["asset/logo.JPG","login.js","config.js","home.js","signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","login","className","src","require","to","React","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","home","props","getUserData","ref","firebase","firestore","collection","data","get","then","querySnapshot","forEach","doc","push","setState","accountChange","event","account","target","value","passwordChange","password","checkLoginAlert","state","accountArray","passwordArray","i","length","swal","fire","indexOf","window","location","assign","apps","initializeApp","analytics","this","style","display","type","placeholder","onChange","marginTop","onClick","signup","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,2LCmB5BC,G,uLAbX,OACI,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACf,yBAAKC,IAAKC,EAAQ,MAClB,2BAAOF,UAAU,aAAjB,YACA,0CACA,kBAAC,IAAD,CAAMG,GAAG,aAAY,uD,GARbC,IAAMC,Y,0CCOXC,EAXA,CACPC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCoFRC,E,YApFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,YAAc,WACZ,IACIC,EADKC,IAASC,YACLC,WAAW,UACpBC,EAAO,GACXJ,EAAIK,MAAMC,MAAK,SAAAC,GACbA,EAAcC,SAAQ,SAAAC,GACpBL,EAAKM,KAAKD,EAAIL,WAEhB,EAAKO,SAAS,CAACP,KAAMA,QAxBN,EA4BnBQ,cAAgB,SAACC,GACf,EAAKF,SAAS,CAACG,QAASD,EAAME,OAAOC,SA7BpB,EAgCnBC,eAAiB,SAACJ,GAChB,EAAKF,SAAS,CAACO,SAAUL,EAAME,OAAOC,SAjCrB,EAoCnBG,gBAAkB,WAIhB,IAJuB,IAAD,EACY,EAAKC,MAAhCN,EADe,EACfA,QAASI,EADM,EACNA,SAAUd,EADJ,EACIA,KACtBiB,EAAe,GACfC,EAAgB,GACZC,EAAE,EAAGA,EAAGnB,EAAKoB,OAASD,IAC1BF,EAAaX,KAAKN,EAAKmB,GAAGT,SAC1BQ,EAAcZ,KAAKN,EAAKmB,GAAGL,UAGT,IAAnBJ,EAAQU,QAAoC,IAApBN,EAASM,QAChCC,IAAKC,KAAK,yCAGwB,IAAnCL,EAAaM,QAAQb,KACnBQ,EAAcD,EAAaM,QAAQb,MAAcI,GAAgC,IAApBA,EAASM,OACvEC,IAAKC,KAAK,6BACkB,IAApBR,EAASM,OACjBC,IAAKC,KAAK,6BAEVE,OAAOC,SAASC,OAAO,qBArD3B,EAAKV,MAAQ,CAACN,QAAQ,GAAGI,SAAS,GAAId,KAAK,IAGtCH,IAAS8B,KAAKP,QACjBvB,IAAS+B,cAAc5C,GAEzBa,IAASgC,YARQ,E,iFAYjBC,KAAKnC,gB,+BAkDG,IAAD,EACqBmC,KAAKd,MAA1BN,EADA,EACAA,QAASI,EADT,EACSA,SAChB,OACI,yBAAKpC,UAAU,OACd,4BAAQA,UAAU,cACf,yBAAKC,IAAKC,EAAQ,MAClB,2BAAOF,UAAU,aAAjB,YACA,yBAAKqD,MAAO,CAACC,QAAQ,WACjB,2BAAOC,KAAK,OAAOC,YAAY,UAAUtB,MAAOF,EAASyB,SAAUL,KAAKtB,iBAE5E,yBAAKuB,MAAO,CAACC,QAAQ,WACjB,uCAAOC,KAAK,OAAOC,YAAY,WAAWtB,MAAOE,EAAUqB,SAAUL,KAAKjB,gBAA1E,OAA+F,cAEnG,4BAAQkB,MAAO,CAACK,UAAU,QAASC,QAASP,KAAKf,iBAAjD,SACA,kBAAC,IAAD,CAAMlC,GAAG,oBAAmB,4BAAQkD,MAAO,CAACK,UAAU,QAA1B,kB,GA7ErBtD,IAAMC,WCaVuD,E,iLAbX,OACI,yBAAK5D,UAAU,OACd,4BAAQA,UAAU,cACf,yBAAKC,IAAKC,EAAQ,MAClB,sCACE,kBAAC,IAAD,CAAMC,GAAG,aAAY,uD,GARdC,IAAMC,W,QCkBZwD,E,iLAbX,OACE,kBAAC,IAAD,KACE,yBAAK7D,UAAU,OACb,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,YAAYC,UAAWjD,IACzC,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,kBAAkBC,UAAWjE,IAC/C,kBAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,mBAAmBC,UAAWJ,U,GAPxCxD,IAAMC,WCKJ4D,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aba0bfdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.18fad0a3.JPG\";","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass login extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"App\" >\r\n         <header className=\"App-header\">\r\n            <img src={require('./asset/logo.JPG')} ></img>\r\n            <label className=\"logoTitle\">FengChat</label>\r\n            <label>welcome</label>\r\n            <Link to=\"/chatroom\"><button>back to home</button></Link>\r\n          </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default login;\r\n","const config = {\r\n        apiKey: \"AIzaSyDTaUGrEK6VmbfoSuVbZGaa0j4oZd8UoKU\",\r\n        authDomain: \"fengchat-93bae.firebaseapp.com\",\r\n        databaseURL: \"https://fengchat-93bae.firebaseio.com\",\r\n        projectId: \"fengchat-93bae\",\r\n        storageBucket: \"fengchat-93bae.appspot.com\",\r\n        messagingSenderId: \"213640623326\",\r\n        appId: \"1:213640623326:web:4eb0c94e117a3b1fb0be4f\",\r\n        measurementId: \"G-PE2XN0LN8M\"\r\n};\r\n\r\nexport default config;\r\n","import React from 'react';\r\nimport swal from 'sweetalert2';\r\nimport {Link} from \"react-router-dom\";\r\nimport firebase from 'firebase';\r\nimport config from \"./config\";\r\nimport './App.css';\r\n\r\nclass home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {account:'',password:'', data:[]};\r\n\r\n    // Initialize Firebase\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n  }\r\n    firebase.analytics();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  //get database data\r\n  getUserData = () => {\r\n    var db = firebase.firestore();\r\n    var ref = db.collection('acount');\r\n    let data = [];\r\n    ref.get().then(querySnapshot => {\r\n      querySnapshot.forEach(doc => {\r\n        data.push(doc.data());\r\n      });\r\n      this.setState({data: data});\r\n    });\r\n  }\r\n\r\n  accountChange = (event) =>  {\r\n    this.setState({account: event.target.value});\r\n  }\r\n\r\n  passwordChange = (event) =>  {\r\n    this.setState({password: event.target.value});\r\n  }\r\n\r\n  checkLoginAlert = () => {\r\n    const {account, password, data} = this.state;\r\n    let accountArray = [];\r\n    let passwordArray = [];\r\n    for(let i=0 ;i <data.length ; i++){\r\n        accountArray.push(data[i].account);\r\n        passwordArray.push(data[i].password);\r\n    }\r\n\r\n    if(account.length === 0 || password.length === 0){\r\n        swal.fire(\"please enter the password or account\")\r\n    }\r\n\r\n    if(accountArray.indexOf(account) !== -1){\r\n      if(passwordArray[accountArray.indexOf(account)] !== password && password.length !== 0){\r\n        swal.fire(\"the password is the wrong\")\r\n      } else if(password.length === 0) {\r\n        swal.fire(\"please enter the password\")\r\n      }else{\r\n        window.location.assign(\"/chatroom/login\")\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const {account, password} = this.state;\r\n    return (\r\n        <div className=\"App\">\r\n         <header className=\"App-header\">\r\n            <img src={require('./asset/logo.JPG')}></img>\r\n            <label className=\"logoTitle\">FengChat</label>\r\n            <div style={{display:'inline'}}>\r\n                <input type=\"text\" placeholder=\"account\" value={account} onChange={this.accountChange}/>\r\n            </div>\r\n            <div style={{display:'inline'}}>\r\n                <input type=\"text\" placeholder=\"password\" value={password} onChange={this.passwordChange} type=\"password\"/>\r\n            </div>\r\n            <button style={{marginTop:'15px'}} onClick={this.checkLoginAlert}>login</button>\r\n            <Link to=\"/chatroom/signup\"><button style={{marginTop:'5px'}}>Sign up</button></Link>\r\n          </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default home;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass signup extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"App\">\r\n         <header className=\"App-header\" >\r\n            <img src={require('./asset/logo.JPG')} ></img>\r\n            <p>sign up</p>\r\n              <Link to=\"/chatroom\"><button>back to home</button></Link>\r\n          </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default signup;","import React from 'react';\nimport login from './login';\nimport home from './home';\nimport signup from './signup';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/chatroom\" component={home} />  \n          <Route exact path=\"/chatroom/login\" component={login} /> \n          <Route exact path=\"/chatroom/signup\" component={signup} /> \n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}